// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "greendrake/l1/internal/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockConfigService is an autogenerated mock type for the IConfigService type
type MockConfigService struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockConfigService) Get(ctx context.Context, key string) (interface{}, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAPIEndpointConfig provides a mock function with given fields: ctx, apiType, endpoint, isAuthenticated
func (_m *MockConfigService) GetAPIEndpointConfig(ctx context.Context, apiType models.APIType, endpoint string, isAuthenticated bool) (*models.APIEndpointConfig, error) {
	ret := _m.Called(ctx, apiType, endpoint, isAuthenticated)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIEndpointConfig")
	}

	var r0 *models.APIEndpointConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.APIType, string, bool) (*models.APIEndpointConfig, error)); ok {
		return rf(ctx, apiType, endpoint, isAuthenticated)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.APIType, string, bool) *models.APIEndpointConfig); ok {
		r0 = rf(ctx, apiType, endpoint, isAuthenticated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.APIEndpointConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.APIType, string, bool) error); ok {
		r1 = rf(ctx, apiType, endpoint, isAuthenticated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPublic provides a mock function with given fields: ctx
func (_m *MockConfigService) GetAllPublic(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPublic")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBool provides a mock function with given fields: ctx, key, defaultValue
func (_m *MockConfigService) GetBool(ctx context.Context, key string, defaultValue bool) bool {
	ret := _m.Called(ctx, key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) bool); ok {
		r0 = rf(ctx, key, defaultValue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetDuration provides a mock function with given fields: ctx, key, defaultValue
func (_m *MockConfigService) GetDuration(ctx context.Context, key string, defaultValue time.Duration) time.Duration {
	ret := _m.Called(ctx, key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetDuration")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) time.Duration); ok {
		r0 = rf(ctx, key, defaultValue)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetFloat64 provides a mock function with given fields: ctx, key, defaultValue
func (_m *MockConfigService) GetFloat64(ctx context.Context, key string, defaultValue float64) float64 {
	ret := _m.Called(ctx, key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat64")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) float64); ok {
		r0 = rf(ctx, key, defaultValue)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetInt provides a mock function with given fields: ctx, key, defaultValue
func (_m *MockConfigService) GetInt(ctx context.Context, key string, defaultValue int) int {
	ret := _m.Called(ctx, key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, int) int); ok {
		r0 = rf(ctx, key, defaultValue)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetString provides a mock function with given fields: ctx, key, defaultValue
func (_m *MockConfigService) GetString(ctx context.Context, key string, defaultValue string) string {
	ret := _m.Called(ctx, key, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, key, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Load provides a mock function with given fields: ctx
func (_m *MockConfigService) Load(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetConfigValue provides a mock function with given fields: ctx, key, value, isPublic
func (_m *MockConfigService) SetConfigValue(ctx context.Context, key string, value interface{}, isPublic bool) error {
	ret := _m.Called(ctx, key, value, isPublic)

	if len(ret) == 0 {
		panic("no return value specified for SetConfigValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, bool) error); ok {
		r0 = rf(ctx, key, value, isPublic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToChanges provides a mock function with given fields: ctx
func (_m *MockConfigService) SubscribeToChanges(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChanges")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockConfigService creates a new instance of MockConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigService {
	mock := &MockConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
